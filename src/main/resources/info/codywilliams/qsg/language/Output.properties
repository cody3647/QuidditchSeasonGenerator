#
# Quidditch Season Generator
# Copyright (C) 2023.  Cody Williams
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

###########################################################################################
match.versus.abbr               = vs
###########################################################################################
#                           Output Text                                                   #
###########################################################################################
# Placeholders:
# Surround the placeholders with ${}
#   Any Page:
#       leagueName =  Name of the league specified in the tournament setup
#       yearRange =  The year range
#   Matches and Plays:
#       homeTeam            Name of the home team
#       homeTeamShort       Short name of the home team
#       awayTeam            Name of the away team
#       awayTeamShort       Short name of the away team
#       date                The date of the match
#   All Plays:
#       attackingTeam       Team name of the chaser with the quaffle or the seeker.
#       attackingTeamShort  Short name of the attacking team
#       defendingTeam       Team name of defending team or the otherSeeker.
#       defendingTeamShort  Short name of the defending team.
#       beaterHitter        The beater of the defending team hitting the bludger.
#       beaterBlocker       The beater of the attacking team blocking the bludger.
#   Chaser Plays:
#       attacker            The chaser with quaffle at start of play.
#       defender            The chaser of the defending team who gets the quaffle at the end of the play.
#   Seeker Plays:
#       seeker              The seeker who catches the snitch
#       otherSeeker         The seeker who did not catch the snitch
leagueName                      = ${leagueName}
yearRange                       = ${yearRange}
########################### Season Output
meta.tournament.keywords        = ${leagueName}, ${yearRange}, Harry Potter, Quidditch, RPG, Role Playing Game

description.tournament.type.StraightRoundRobin= The ${leagueName} play a round-robin tournament. All teams play each other once. There are no caps on the length of the game, when the snitch is caught the game ends.\n\
A win earns two points. In addition to these two points a win by 150 points earns five points, by 100 points an extra three points and by 50 points an extra one point. The team with the most points at the end of the season wins the League Cup.
description.tournament.type.StraightRoundRobinHomeAway= The ${leagueName} play a double round-robin tournament. All teams play each other twice, once at home and once away. There are no caps on the length of the game, when the snitch is caught the game ends.\n\
A win earns two points. In addition to these two points a win by 150 points earns five points, by 100 points an extra three points and by 50 points an extra one point. The team with the most points at the end of the season wins the League Cup.
description.tournament.type.Hogwarts = The ${leagueName} play a round-robin tournament.  All teams play each other once.  The game continues until the snitch is caught. \n\
Teams scores are added to their tournament points for each game, win or lose.  The team with the most points at the end of the season wins the Cup.

openingDay                      = Opening Day of ${yearRange} Season
tournamentName                  = ${leagueName} Cup
tournamentTitle                 = ${leagueName} Cup (${yearRange})
tournament.key.header           = Key
tournament.key.winner           = Winner of Match
header.round                    = Round:
header.date                     = Date
header.home                     = Home
header.away                     = Away
header.location                 = Location
header.length                   = Length
header.points                   = Points
header.score                    = Score
header.schedule                 = Schedule
header.rankings                 = Cup Rankings
header.rank.team                = Team
header.rank.points              = Final Points
rankings                        = ${leagueName} Cup Rankings at the end of the ${yearRange} season.
generator.version               = Match Generator Version
generator.seed                  = Seed
###########################################################################################
########################### Match Output
match.title                     = Match: ${homeTeam} vs ${awayTeam} (${yearRange})
match.title.i                   = Match: ${homeTeam} vs ${awayTeam} (${i})
meta.match.keywords             = ${homeTeam}, ${awayTeam}, ${leagueName}, ${date}, Harry Potter, Quidditch, RPG, Role Playing Game
match.ib.title                  = Quidditch Match
match.ib.location               = Match Location
match.ib.start                  = Start of Game
match.ib.end                    = End of Game
match.ib.length                 = Length
match.ib.snitchRelease          = Snitch Release
match.ib.fouls                  = Fouls
match.ib.finalScore             = Final Score
match.score                     = Score
match.foul                      = Foul
match.penalty                   = Penalty Shot
match.final                     = Final Score
match.time                      = Time
###########################################################################################
########################### Chaser Plays
# chaser.QuaffleOutcome.BludgerOutcome.player Text strings for Chaser Plays including player names.
# chaser.QuaffleOutcome.BludgerOutcome Text strings for Chaser Plays without including player names.
# QuaffleOutcomes turnover, miss, block (blocked by keeper), scored
# BludgerOutcomes none (no bludger involved with play), blocked (by beater on attacking team), hit, miss
chaser.turnover.none.player     = ${attacker} (${attackingTeamShort}) turns over quaffle to ${defender} (${defendingTeamShort}).
chaser.turnover.none            = ${attackingTeamShort} turns over the quaffle to ${defendingTeamShort}.
chaser.turnover.blocked.player  = ${attacker} (${attackingTeamShort}) turns over the quaffle, despite ${beaterBlocker} blocking the bludger hit by ${beaterHitter}, ${defender} (${defendingTeamShort}) has the quaffle.
chaser.turnover.blocked         = ${attackingTeamShort} turns over the quaffle despite bludger being blocked, ${defendingTeamShort} has the quaffle.
chaser.turnover.hit.player      = ${attacker} (${attackingTeamShort}) takes a bludger hit from ${beaterHitter}, ${defender} (${defendingTeamShort}) has the quaffle.
chaser.turnover.hit             = ${attackingTeamShort} takes a bludger hit and turns over the quaffle, ${defendingTeamShort} has the quaffle.
chaser.turnover.missed.player   = ${attacker} (${attackingTeamShort}) dodges bludger hit by ${beaterHitter} but turns over the quaffle, ${defender} (${defendingTeamShort}) has the quaffle.
chaser.turnover.missed          = ${attackingTeamShort} turns over the quaffle despite dodging bludger, ${defendingTeamShort} has the quaffle.
chaser.missed.none.player       = ${attacker} (${attackingTeamShort}) misses the shot.  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.missed.none              = ${attackingTeamShort} misses the shot. ${defendingTeamShort} has the quaffle.
chaser.missed.blocked.player    = ${attacker} (${attackingTeamShort}) misses the shot, despite bludger being blocked by ${beaterBlocker}.  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.missed.blocked           = ${attackingTeamShort} missed the shot, despite bludger being blocked. ${defendingTeamShort} has the quaffle.
chaser.missed.hit.player        = ${attacker} (${attackingTeamShort}) is hit by bludger from ${beaterHitter} and misses the shot. ${defender} (${defendingTeamShort}) has the quaffle.
chaser.missed.hit               = ${attckingTeam} missed the shot after chaser was hit by bludger.  ${defendingTeamShort} has the quaffle.
chaser.missed.missed.player     = ${attacker} (${attackingTeamShort})  dodges bludger hit by ${beaterHitter} but misses the shot. ${defender} (${defendingTeamShort}) has the quaffle.
chaser.missed.missed            = ${attackingTeamShort}'s chaser dodged a bludger but missed the shot. ${defendingTeamShort} has the quaffle.
chaser.blocked.none.player      = ${attacker}'s (${attackingTeamShort}) shot is blocked by ${keeper}.  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.blocked.none             = ${attackingTeamShort}'s shot is blocked. ${defendingTeamShort} has the quaffle.
chaser.blocked.blocked.player   = ${attacker} (${attackingTeamShort}) bludger blocked by ${beaterBlocker} and shot is blocked by ${keeper}.  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.blocked.blocked          = ${attackingTeamShort} blocked bludger but their shot was blocked. ${defendingTeamShort} has the quaffle.
chaser.blocked.hit.player       = ${attacker} (${attackingTeamShort}) takes a blodger hit by ${beaterHitter} and the shot is blocked by ${keeper}.  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.blocked.hit              = ${attackingTeamShort}'s chaser is hit by a bludger and the shot was blocke. ${defendingTeamShort} has the quaffle.
chaser.blocked.missed.player    = ${attacker} (${attackingTeamShort}) dodged the bludger hit by ${beaterHitter} but the shot is blocked by ${keeper}.  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.blocked.missed           = ${attackingTeamShort}'s chaser dodged the bludger but the shot was blocked. ${defendingTeamShort} has the quaffle.
chaser.scored.none.player       = ${attacker} (${attackingTeamShort}) scores!  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.scored.none              = ${attackingTeamShort} scores! ${defendingTeamShort} has the quaffle.
chaser.scored.blocked.player    = ${attacker} (${attackingTeamShort}) scores after ${beaterBlocker} blocks the bludger from ${beaterHitter}!  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.scored.blocked           = ${attackingTeamShort} blocks the bludger and scores! ${defendingTeamShort} has the quaffle.
chaser.scored.hit.player        = ${attacker} (${attackingTeamShort}) scores after taking bludger hit from ${beaterHitter}!  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.scored.hit               = ${attackingTeamShort} is hit by the bludger but still scores! ${defendingTeamShort} has the quaffle.
chaser.scored.missed.player     = ${attacker} (${attackingTeamShort}) doges bludger and scores!  ${defender} (${defendingTeamShort}) has the quaffle.
chaser.scored.missed            = ${attackingTeamShort} dodges the bludger and scores! ${defendingTeamShort} has the quaffle.
foul.scored.player              = ${fouler} (${foulerTeamShort}) committed a foul. ${attacker} (${attackingTeamShort}) takes penalty shot and scores!
foul.scored                     = ${foulerTeamShort} committed a foul. ${attackingTeamShort} scores! ${defendingTeamShort} has the quaffle.
foul.blocked.player             = ${fouler} (${foulerTeamShort}) committed a foul. ${attacker}'s (${attackingTeamShort}) penalty shot is blocked by ${keeper}.
foul.blocked                    = ${foulerTeamShort} committed a foul. ${attackingTeamShort}'s penalty shot is blocked.
foul.missed.player              = ${fouler} (${foulerTeamShort}) committed a foul. ${attacker} (${attackingTeamShort}) misses the penalty shot.
foul.missed                     = ${foulerTeamShort} committed a foul. ${attackingTeamShort} misses the penalty shot.
injury.bludger_blocked.player   = ${injuredPlayer} (${injuredPlayerTeamShort}) was injured while blocking bludger.
injury.bludger_blocked          = ${injuredPlayerTeamShort} player was injured blocking a bludger.
injury.bludger_hit.player       = ${injuredPlayer} (${injuredPlayerTeamShort}) was injured after taking hit from bludger.
injury.bludger_hit              = ${injuredPlayerTeamShort} player was injured taking a hit from a bludger.
injury.chaser.player            = ${injuredPlayer} (${injuredPlayerTeamShort}) was injured during the play.
injury.chaser                   = ${injuredPlayerTeamShort} chaser was injured during the play.
injury.keeper.blocked.player    = ${injuredPlayer} (${injuredPlayerTeamShort}) was injured blocking the quaffle.
injury.keeper.missed.player     = ${injuredPlayer} (${injuredPlayerTeamShort}) was injured trying to block the quaffle.
injury.keeper.blocked           = ${injuredPlayerTeamShort} keeper was injured blocking the quaffle.
injury.keeper.missed            = ${injuredPlayerTeamShort} keeper was injured trying to block the quaffle.
###########################################################################################
########################### Seeker Plays
# seeker.SnitchOutcome.BludgerOutcome.player Text strings for Chaser Plays including player names.
# seeker.SnitchOutcome.BludgerOutcome Text strings for Chaser Plays without including player names.
# SnitchOutcomes feint (unused), seen (unused with bludgers), missed, caught, stolen
# BludgerOutcomes none (no bludger involved with play), blocked (by beater on attacking team), hit, miss
# seeker.feint.none.player   =
# seeker.feint.none          =
# seeker.feint.blocked.player=
# seeker.feint.blocked       =
# seeker.feint.hit.player    =
# seeker.feint.hit           =
# seeker.feint.missed.player =
# seeker.feint.missed        =
seeker.seen.none.player         = Snitch was seen but no one got close.
seeker.seen.none                = Snitch was seen but no one got close.
# seeker.seen.blocked.player =
# seeker.seen.blocked        =
# seeker.seen.hit.player     =
# seeker.seen.hit            =
# seeker.seen.missed.player  =
# seeker.seen.missed         =
seeker.missed.none.player       = ${seeker} (${attackingTeamShort}) missed the snitch.
seeker.missed.none              = ${attackingTeamShort} missed the snitch.
seeker.missed.blocked.player    = ${seeker} (${attackingTeamShort}) missed the snitch despite ${beaterBlocker} blocking bludger from ${beaterHitter}.
seeker.missed.blocked           = ${attackingTeamShort} missed the snitch despite bludger being blocked.
seeker.missed.hit.player        = ${seeker} (${attackingTeamShort}) missed the snitch after taking a bludger hit by ${beaterHitter}.
seeker.missed.hit               = ${attackingTeamShort} missed the snitch after being hit by bludger.
seeker.missed.missed.player     = ${seeker} (${attackingTeamShort}) missed the snitch after dodging bludger from ${beaterHitter}
seeker.missed.missed            = ${attackingTeamShort} missed the snitch after being forced to dodge bludger.
seeker.caught.none.player       = ${seeker} (${attackingTeamShort}) catches the snitch!
seeker.caught.none              = ${attackingTeamShort} catches the snitch!
seeker.caught.blocked.player    = ${seeker} (${attackingTeamShort}) protected from bludger by ${beaterBlocker}, catches the snitch!
seeker.caught.blocked           = ${attackingTeamShort} catches the snitch after bludger blocked!
seeker.caught.hit.player        = ${seeker} (${attackingTeamShort}) takes a bludger hit and still catches the snitch!
seeker.caught.hit               = ${attackingTeamShort} catches the snitch after bludger hit!
seeker.caught.missed.player     = ${seeker} (${attackingTeamShort}) dodges bludger and catches the snitch!
seeker.caught.missed            = ${attackingTeamShort} catches the snitch after dodging bludger!
seeker.stolen.none.player       = ${seeker} (${attackingTeamShort}) stole the snitch right from under ${otherSeeker}'s nose.
seeker.stolen.none              = ${attackingTeamShort} steals the snitch!
seeker.stolen.blocked.player    = ${seeker} (${attackingTeamShort}) protected from bludger by ${beaterBlocker} steals the snitch right from under ${otherSeeker}'s nose.
seeker.stolen.blocked           = ${attackingTeamShort} steals the snitch after bludger blocked!
seeker.stolen.hit.player        = ${seeker} (${attackingTeamShort}) steals the snitch right from under ${otherSeeker}'s nose despite taking bludger hit from ${beaterHitter}
seeker.stolen.hit               = ${attackingTeamShort} steals the snitch after bludger hit!
seeker.stolen.missed.player     = ${seeker} (${attackingTeamShort}) steals the snitch right from under ${otherSeeker}'s nose after dodging bludger hit by ${beaterHitter}
seeker.stolen.missed            = ${attackingTeamShort} steals the snitch after dodging bludger!